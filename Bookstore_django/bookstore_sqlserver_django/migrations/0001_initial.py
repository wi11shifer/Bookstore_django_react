# Generated by Django 5.0.14 on 2025-04-21 16:57

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('author_id', models.AutoField(db_column='AuthorID', primary_key=True, serialize=False)),
                ('first_name', models.CharField(db_column='FirstName', max_length=100)),
                ('last_name', models.CharField(db_column='LastName', max_length=100)),
                ('birthdate', models.DateField(blank=True, db_column='Birthdate', null=True)),
            ],
            options={
                'db_table': 'Authors',
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('customer_id', models.AutoField(db_column='CustomerID', primary_key=True, serialize=False)),
                ('first_name', models.CharField(db_column='FirstName', max_length=100)),
                ('last_name', models.CharField(db_column='LastName', max_length=100)),
                ('email', models.EmailField(blank=True, db_column='Email', max_length=254, null=True)),
                ('phone', models.CharField(blank=True, db_column='Phone', max_length=20, null=True)),
                ('address', models.TextField(blank=True, db_column='Address', null=True)),
            ],
            options={
                'db_table': 'Customers',
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('genre_id', models.AutoField(db_column='GenreID', primary_key=True, serialize=False)),
                ('genre_name', models.CharField(db_column='GenreName', max_length=100)),
            ],
            options={
                'db_table': 'Genres',
            },
        ),
        migrations.CreateModel(
            name='Publisher',
            fields=[
                ('publisher_id', models.AutoField(db_column='PublisherID', primary_key=True, serialize=False)),
                ('publisher_name', models.CharField(db_column='PublisherName', max_length=255)),
                ('address', models.TextField(blank=True, db_column='Address', null=True)),
                ('phone', models.CharField(blank=True, db_column='Phone', max_length=20, null=True)),
                ('email', models.EmailField(blank=True, db_column='Email', max_length=254, null=True)),
            ],
            options={
                'db_table': 'Publishers',
            },
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('book_id', models.AutoField(db_column='BookID', primary_key=True, serialize=False)),
                ('title', models.CharField(db_column='Title', max_length=255)),
                ('publication_date', models.DateField(blank=True, db_column='PublicationDate', null=True)),
                ('price', models.DecimalField(db_column='Price', decimal_places=2, max_digits=10)),
                ('author', models.ForeignKey(db_column='AuthorID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='bookstore_sqlserver_django.author')),
            ],
            options={
                'db_table': 'Books',
            },
        ),
        migrations.CreateModel(
            name='BookGenre',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('book', models.ForeignKey(db_column='BookID', on_delete=django.db.models.deletion.CASCADE, to='bookstore_sqlserver_django.book')),
                ('genre', models.ForeignKey(db_column='GenreID', on_delete=django.db.models.deletion.CASCADE, to='bookstore_sqlserver_django.genre')),
            ],
            options={
                'db_table': 'BookGenres',
                'unique_together': {('book', 'genre')},
            },
        ),
        migrations.AddField(
            model_name='book',
            name='extra_genres',
            field=models.ManyToManyField(related_name='books', through='bookstore_sqlserver_django.BookGenre', to='bookstore_sqlserver_django.genre'),
        ),
        migrations.AddField(
            model_name='book',
            name='genre',
            field=models.ForeignKey(blank=True, db_column='GenreID', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='primary_books', to='bookstore_sqlserver_django.genre'),
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('order_id', models.AutoField(db_column='OrderID', primary_key=True, serialize=False)),
                ('order_date', models.DateField(db_column='OrderDate')),
                ('total_amount', models.DecimalField(db_column='TotalAmount', decimal_places=2, max_digits=10)),
                ('customer', models.ForeignKey(db_column='CustomerID', on_delete=django.db.models.deletion.CASCADE, to='bookstore_sqlserver_django.customer')),
            ],
            options={
                'db_table': 'Orders',
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('order_item_id', models.AutoField(db_column='OrderItemID', primary_key=True, serialize=False)),
                ('quantity', models.PositiveIntegerField(db_column='Quantity')),
                ('book', models.ForeignKey(db_column='BookID', on_delete=django.db.models.deletion.CASCADE, to='bookstore_sqlserver_django.book')),
                ('order', models.ForeignKey(db_column='OrderID', on_delete=django.db.models.deletion.CASCADE, related_name='items', to='bookstore_sqlserver_django.order')),
            ],
            options={
                'db_table': 'OrderItems',
            },
        ),
        migrations.AddField(
            model_name='book',
            name='publisher',
            field=models.ForeignKey(db_column='PublisherID', null=True, on_delete=django.db.models.deletion.SET_NULL, to='bookstore_sqlserver_django.publisher'),
        ),
    ]
